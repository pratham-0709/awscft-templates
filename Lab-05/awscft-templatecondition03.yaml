AWSTemplateFormatVersion: 2010-09-09
Description: Conditional Statements Part 03
  
Parameters:
  EnvironmentName:
    Type: String
    Description: Choosing ENV to deploy resource
    Default: local
    AllowedValues:
      - local
      - dev
      - stg
      - prod
  
  VPCID:
    Type: String
    Description: Enter the existing VPC ID

  SubnetId:
    Type: String
    Description: Subnet ID of the existing VPC ID

Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-00bb6a80f01f03502
    ap-northeast-1:
      AMI: ami-023a307f3d27ea427
  
  EnvironmentMap:
    dev:
      InstanceType: t2.small
    stg: 
      InstanceType: t2.micro
    prod:
      InstanceType: t2.medium

Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName , prod]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName , prod]

Resources:
  MyEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !FindInMap [EnvironmentMap, !Ref EnvironmentName, InstanceType]
      SubnetId: !Ref SubnetId
  
  MyEIP:
    Type: "AWS::EC2::EIP"
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyEC2Instance
  
  MyProdSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Condition: CreateProdSecurityGroup
    Properties:
      GroupDescription: Test SG for Prod ENV
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

Outputs:
  InstanceId:
    Description: Instance ID 
    Value: !Ref MyEC2Instance
  
  InstancePublicIp:
    Description: Public IP of the Instance
    Value: !GetAtt MyEC2Instance.PublicIp